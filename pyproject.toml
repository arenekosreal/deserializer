[project]
name = "deserializer"
description = "Deserialize class from dict from json/yaml/toml."
authors = [
    {name = "Zhang Hua", email = "zhanghua.00@qq.com"},
]
dependencies = []
requires-python = ">=3.12"
readme = "README.md"
license = {text = "LicenseRef-WTFPL"}
dynamic = ["version"]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "pytest-ruff>=0.4.1",
    "pytest-cov>=5.0.0",
]

[tool.pdm.version]
source = "file"
path = "src/deserializer/__init__.py"

[tool.basedpyright]
venvPath="."
venv=".venv"
reportMissingImports = true
pythonPlatform = "All"
typeCheckingMode = "all"
useLibraryCodeForTypes = true
# diagnostic rules
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportMissingTypeStubs = "warning"
reportImportCycles = true
reportUninitializedInstanceVariable = "warning"
reportCallInDefaultInitializer = "warning"
reportImplicitStringConcatenation = true
reportUnusedCallResult = "information"
reportUnnecessaryTypeIgnoreComment = "information"
reportImplicitOverride = "information"
reportShadowedImports = "information"

[tool.pytest.ini_options]
addopts = "--cov=deserializer --ruff"
required_plugins = "pytest-ruff pytest-cov"

[tool.ruff]
builtins = ["_"]
line-length = 100
extend-exclude = ["__pycache__"]
output-format = "github"
required-version = ">=0.6.3"

[tool.ruff.lint]
preview = true
select = [
    "F", # Pyflakes
    "E", "W", # pycodestyle, Error, Warning
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PL", # Pylint
    "R", # Refactor
    "FLY", # flynt
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # Ruff specific
]
ignore = [
    "ANN101", # type for self
    "ANN102", # type for cls
    "PLW0603", # global statements
    "FIX002", # todo is not critical
    "COM812",
    "ISC001",
]

[tool.ruff.lint.per-file-ignores]
# tests are usually using assert and private objects
# Magic value in test
"tests/**.py" = ["S101", "PLR2004"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.isort]
force-single-line = true
length-sort = true
lines-after-imports = 2
no-sections = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 100
max-line-length = 100

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true
